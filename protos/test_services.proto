/*
  Examples on how to annotate the proto file with gnostics.
  For more detailed examples check this files
  https://github.com/google/gnostic/blob/main/testdata/v3.0/petstore.text
  It's not a proto file but it contains the hierarchy of the annotations.
  If the example is not covered there you'll need to look directly into the proto source
  https://github.com/google/gnostic/blob/main/openapiv3/OpenAPIv3.proto

  Another issue is that this library is abandonedware 
  https://github.com/google/gnostic/issues/441
*/
syntax = "proto3";

package tests.openapiv3annotations.message.v1;

import "google/api/annotations.proto";
import "gnostic/openapi/v3/annotations.proto";

option go_package = "github.com/google/gnostic/apps/protoc-gen-openapi/examples/tests/openapiv3annotations/message/v1;message";
/*
  Annotations at the document level
*/ 
option (gnostic.openapi.v3.document) = {
  info: {
    title: "Curator";
    version: "1.0";
  };
  servers: [{
    url: "dev-api.flipp.com/curator";
    description: "Personalization service";
  }];
  security: {
    additional_properties: [{
      name: "ApiKeyAuth";
      value: {
        value: []
      }
    }]
  };
  components: {
    security_schemes: {
      additional_properties: [
        {
          name: "ApiKeyAuth";
          value: {
            security_scheme: {
              type: "apiKey";
              name: "Authorization";
              in: "header"
            }
          }
        }
      ]
    }
  }
};

service Messaging1 {
  rpc UpdateMessage(UserInfoRequest) returns(UserInfoResponse) {
    /*
      NOTE: This library seems to be dependent on the google.api.http annotation to generate the openapi file.
      If you do not add the google api annotations the file will not be generated correctly
    */ 
    option(google.api.http) = {
        patch: "/v1/messages/{message_id}"
        body: "*"
    };
    /*
      Operations level annotations

      - We can add tags summary etc.
    */
    option(gnostic.openapi.v3.operation) = {
        summary: "Get Content"
        /*
          ISSUE we can't have a ref under the description cuz description is only a string.
        */ 
        description: "./docs/get_content.md"
        operation_id: "CuratorService_GetContent"
        /*
          ISSUE by default gnostics will add a tag with the name of the service in this case Messaging1 which messes up readme. Ideally we would only want the tags defined in here.
        */ 
        tags: ["Content"]
        security: [
          {
            additional_properties: [
              {
                name: "BasicAuth";
                value: {
                  value: []
                }
              }
            ]
          }
        ]
        responses: {
          response_or_reference: {
            name: "201"
            value: {
              response: {
                description: "Example on how to add a response to a operation annotation"
                content: {
                  additional_properties: {
                    name: "application/json"
                    value: {
                      schema: {
                        reference: {
                          _ref: "#/components/schemas/ContentResponse"
                        }
                      }
                      example: {
                        /*
                          Long examples can be added even if the key says yaml the get properly converted into json in the resulting openapi file
                        */
                        yaml: "{\"publications\":[{\"globalId\":\"01HWX8FNE2ZAV0B4P5RQ7TN95G\",\"merchantId\":1,\"dates\":{\"availableFrom\":\"2024-04-08T18:47:43Z\",\"availableTo\":\"2026-04-18T18:47:43Z\",\"validFrom\":\"2024-04-08T18:47:43Z\",\"validTo\":\"2026-04-18T18:47:43Z\"},\"details\":{\"name\":\"some-name\",\"description\":\"some-description\",\"imageUrl\":\"https://example.com\",\"additionalInfo\":{\"key\":\"NewValue\"},\"backgroundImageUrl\":\"https://example.com/background_image.jpg\",\"backgroundColor\":\"#FFFFFF\",\"tintColor\":\"#FFFFFF\",\"additionalMedia\":[]},\"language\":\"LANGUAGE_EN\",\"source\":\"\",\"legacyIds\":null},{\"globalId\":\"01HXYF6J1PHEQJ9Y293NTTPH0G\",\"merchantId\":111111,\"dates\":{\"availableFrom\":\"2024-12-01T12:00:00Z\",\"availableTo\":\"2024-12-31T12:00:00Z\",\"validFrom\":\"2024-12-01T12:00:00Z\",\"validTo\":\"2024-12-31T12:00:00Z\"},\"details\":{\"name\":\"some-name\",\"description\":\"some-description\",\"imageUrl\":\"http://some-image.com\",\"additionalInfo\":{},\"backgroundImageUrl\":\"https://example.com/background_image.jpg\",\"backgroundColor\":\"\",\"tintColor\":\"\",\"additionalMedia\":[]},\"language\":\"LANGUAGE_EN\",\"source\":\"\",\"legacyIds\":null}],\"total\":0}"
                      }
                    }
                  }
                }
              }
            }
          }
          response_or_reference: {
            name: "404"
            value: {
              response: {
                description: "Multiple response can be defined at the operation level"
              }
            }
          }
          /*
            ISSUE: These are bogus responses definitions because they will NOT override the response coming from the parent messages. In this case:
              - 200 will come from the Response message
              - default defaults to the Status message defined somewhere in grpc
            If you check the generated openapi file you'll see that the response for 200 and default are duplicated which is a bummer.
          */ 
          response_or_reference: {
            name: "200"
            value: {
              response: {
                description: "Does not overrides 200"
              }
            }
          }
          default: {
            response: {
              description: "Does not overrides default"
              content: {
                additional_properties: {
                  name: 'application/json'
                  value: {
                    schema: {
                      reference: {
                        _ref: "#/components/schemas/SomeOtherResponse"
                      }
                    }
                  }
                }
              }
            }
          }
        }
    };
  }
}

message UserInfoRequest {
  /*
    Annotations at the message level
  */ 
  option (gnostic.openapi.v3.schema) = {
    title: "This is the Request message";
  };

  int64 id = 1;

  /*
    Annotations at the field level
  */
  string label = 2 [
    (gnostic.openapi.v3.property) = {
      title: "this is an overriden field schema title";
      max_length: 255;
      example: {
        yaml: "{ \"userInput\": { \"location\": { \"fsa\": \"H0H\" } } }"
      }
    }
  ];
}

message UserInfoResponse {
  option (gnostic.openapi.v3.schema) = {
    title: "This is the Response Message";
  };
  int64 id = 1;
  string name = 2;
  string email = 3;
  /*
    ISSUE: The oneof gets completely ignored by gnostics. They get registered as different fields in the openapi file.
  */
  oneof contact_info {
    Address address = 4;
    Phone phone = 5;
  }
}

message Address {
  string street = 1;
  string city = 2;
  string state = 3;
  string zip = 4;
}

message Phone {
  string number = 1;
  string type = 2;
}
